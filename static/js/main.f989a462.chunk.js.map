{"version":3,"sources":["PostApp.js","index.js"],"names":["API_URL","PostApp","props","createPost","a","console","log","state","axios","post","userId","title","body","data","posts","push","setState","getPosts","get","updatePost","id","put","index","findIndex","deletePost","postId","delete","filter","handleChange","target","name","value","handleSubmit","event","preventDefault","selectPostToUpdate","this","onSubmit","type","onChange","required","map","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f989a462.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nclass PostApp extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            posts: [],\r\n            id: \"\",\r\n            userId: \"\",\r\n            body: \"\",\r\n            title: \"\",\r\n        };\r\n    }\r\n\r\n\r\n\r\n//CREATE Operations\r\n\r\ncreatePost = async () => {\r\n    console.log(this.state);\r\n    try{\r\n        const {data:post} = await axios.post(API_URL, {\r\n            userId : this.state.userId,\r\n            title : this.state.title,\r\n            body : this.state.body,\r\n        });\r\n        let posts = [...this.state.posts];\r\n        posts.push(post);\r\n        this.setState({posts , userId:\"\",title:\"\",body:\"\"}); \r\n    }\r\n    catch (err){\r\n        console.log(\"Error fetching data from server\" , err);\r\n    }\r\n};\r\n\r\n//READ Operations\r\n\r\ngetPosts = async () => {\r\n    try{\r\n        const {data} = await axios.get(API_URL);\r\n        this.setState({ posts: data})\r\n    }\r\n    catch (err){\r\n        console.log(\"Error creating data from server\" , err);\r\n    }\r\n};\r\n\r\n//Update Operations\r\n\r\nupdatePost = async () => {\r\n    try{\r\n        const {id,userId,title,body} = this.state;\r\n        const {data:post} = await axios.put(`${API_URL}/${id}` , {\r\n                userId,\r\n                title,\r\n                body,\r\n        });\r\n        const posts = [...this.state.posts];\r\n        const index = posts.findIndex((post) => post.id === id);\r\n        posts[index] = post;\r\n        this.setState({posts , id:\"\",userId:\"\",title:\"\",body:\"\"}); \r\n    }\r\n    catch (err){\r\n        console.log(\"Error updating data from server\" , err);\r\n    }\r\n};\r\n\r\n\r\n//Delete Opeartions\r\n\r\ndeletePost = async (postId) => {\r\n    console.log(postId);\r\n    try{\r\n        await axios.delete(`${API_URL}/${postId}`);\r\n        console.log(`${postId} Deleted  ` );\r\n        let posts = [...this.state.posts];\r\n        posts = posts.filter((post) => post.id !== postId);\r\n        this.setState({posts});\r\n    }\r\n    catch (err){\r\n        console.log(\"Error deleting data from server\" , err);\r\n    }\r\n};\r\n\r\n\r\n\r\ncomponentDidMount(){\r\n    this.getPosts();\r\n}\r\n\r\nhandleChange = ({target : { name, value }}) => {\r\n    this.setState({ [name] : value});\r\n};\r\n\r\nhandleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if(this.state.id)\r\n        this.updatePost();\r\n    else\r\n        this.createPost();\r\n  } \r\n\r\nselectPostToUpdate = (post) => {\r\n    this.setState({...post});\r\n}\r\n\r\nrender(){\r\n        return (\r\n        <>\r\n            <h3>Post App</h3>\r\n            <form onSubmit={this.handleSubmit} >\r\n          <div>\r\n            <label>User Id : </label>\r\n            <input name = \"userId\" type=\"text\" value={this.state.userId} onChange={this.handleChange} required/>\r\n          </div>\r\n          <br />\r\n          <div>\r\n          <label>Title :  </label>\r\n            <input name=\"title\" type=\"text\" value={this.state.title} onChange={this.handleChange} required/>\r\n          </div>\r\n          <br />\r\n          <div>\r\n          <label>Body : </label>\r\n            <input name=\"body\" type=\"text\" value={this.state.body} onChange={this.handleChange} required/>\r\n          </div>\r\n          <br />\r\n          <div>\r\n              <button type=\"submit\">Submit</button>\r\n          </div>\r\n          <br />\r\n          </form>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                <th>PostId</th>\r\n                <th>UserId</th>\r\n                <th>Title</th>\r\n                <th>Body</th>\r\n                <th>Actions</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {this.state.posts.map((post,index) => {\r\n                    return (\r\n                        <tr key={index}>\r\n                            <td>{post.id}</td>\r\n                            <td>{post.userId}</td>\r\n                            <td>{post.title}</td>\r\n                            <td>{post.body}</td>\r\n                            <td>\r\n                                <button onClick={() => this.selectPostToUpdate(post)}>Update</button>\r\n                                <button onClick={() => this.deletePost(post.id)}>Delete</button>\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                    })}\r\n                    </tbody>\r\n            </table>\r\n        </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport PostApp from './PostApp';\n\nReactDOM.render(\n  <PostApp />,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}